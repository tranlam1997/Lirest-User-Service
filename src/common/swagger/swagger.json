{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"Record_string.unknown_": {
				"properties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"BadRequestResponseModel": {
				"properties": {
					"statusCode": {
						"type": "number",
						"enum": [
							400
						],
						"nullable": false
					},
					"message": {
						"type": "string",
						"enum": [
							"Bad Request"
						],
						"nullable": false
					},
					"data": {
						"$ref": "#/components/schemas/Record_string.unknown_"
					}
				},
				"required": [
					"statusCode",
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ErrorResponseModel_400_": {
				"$ref": "#/components/schemas/BadRequestResponseModel"
			},
			"UnauthorizedResponseModel": {
				"properties": {
					"statusCode": {
						"type": "number",
						"enum": [
							401
						],
						"nullable": false
					},
					"message": {
						"type": "string",
						"enum": [
							"Unauthorized"
						],
						"nullable": false
					},
					"data": {
						"$ref": "#/components/schemas/Record_string.unknown_"
					}
				},
				"required": [
					"statusCode",
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ErrorResponseModel_401_": {
				"$ref": "#/components/schemas/UnauthorizedResponseModel"
			},
			"ForbiddenResponseModel": {
				"properties": {
					"statusCode": {
						"type": "number",
						"enum": [
							403
						],
						"nullable": false
					},
					"message": {
						"type": "string",
						"enum": [
							"Forbidden"
						],
						"nullable": false
					},
					"data": {
						"$ref": "#/components/schemas/Record_string.unknown_"
					}
				},
				"required": [
					"statusCode",
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ErrorResponseModel_403_": {
				"$ref": "#/components/schemas/ForbiddenResponseModel"
			},
			"NotFoundResponseModel": {
				"properties": {
					"statusCode": {
						"type": "number",
						"enum": [
							404
						],
						"nullable": false
					},
					"message": {
						"type": "string",
						"enum": [
							"Not Found"
						],
						"nullable": false
					},
					"data": {
						"$ref": "#/components/schemas/Record_string.unknown_"
					}
				},
				"required": [
					"statusCode",
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ErrorResponseModel_404_": {
				"$ref": "#/components/schemas/NotFoundResponseModel"
			},
			"ValidationFailedResponseModel": {
				"properties": {
					"statusCode": {
						"type": "number",
						"enum": [
							422
						],
						"nullable": false
					},
					"message": {
						"type": "string",
						"enum": [
							"Validation Failed"
						],
						"nullable": false
					},
					"data": {
						"$ref": "#/components/schemas/Record_string.unknown_"
					}
				},
				"required": [
					"statusCode",
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ErrorResponseModel_422_": {
				"$ref": "#/components/schemas/ValidationFailedResponseModel"
			},
			"InternalServerErrorResponseModel": {
				"properties": {
					"statusCode": {
						"type": "number",
						"enum": [
							500
						],
						"nullable": false
					},
					"message": {
						"type": "string",
						"enum": [
							"Internal Server Error"
						],
						"nullable": false
					},
					"data": {
						"$ref": "#/components/schemas/Record_string.unknown_"
					}
				},
				"required": [
					"statusCode",
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ErrorResponseModel_500_": {
				"$ref": "#/components/schemas/InternalServerErrorResponseModel"
			},
			"UUID": {
				"type": "string",
				"format": "uuid",
				"description": "Stringified UUIDv4.\r\nSee [RFC 4112](https://tools.ietf.org/html/rfc4122)",
				"pattern": "[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}"
			},
			"User": {
				"properties": {
					"id": {
						"$ref": "#/components/schemas/UUID"
					},
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"dateOfBirth": {
						"type": "string",
						"format": "date-time"
					},
					"phoneNumber": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"emailVerified": {
						"type": "boolean"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"id",
					"firstName",
					"lastName",
					"dateOfBirth",
					"phoneNumber",
					"email",
					"username",
					"password",
					"emailVerified",
					"createdAt",
					"updatedAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Partial_CreateUserBodyRequest_": {
				"properties": {
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"dateOfBirth": {
						"type": "string",
						"format": "date-time"
					},
					"phoneNumber": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"UpdateUserBodyRequest": {
				"$ref": "#/components/schemas/Partial_CreateUserBodyRequest_"
			}
		},
		"securitySchemes": {
			"bearer": {
				"type": "http",
				"scheme": "bearer",
				"name": "jwt"
			},
			"api_key": {
				"type": "apiKey",
				"name": "access_token",
				"in": "query"
			},
			"tsoa_auth": {
				"type": "oauth2",
				"flows": {
					"implicit": {
						"authorizationUrl": "http://swagger.io/api/oauth/dialog",
						"scopes": {
							"write:pets": "modify things",
							"read:pets": "read things"
						}
					}
				}
			}
		}
	},
	"info": {
		"title": "lirest-user-service",
		"version": "0.1.0",
		"description": "User service for lirest project",
		"license": {
			"name": "MIT"
		},
		"contact": {
			"name": "Tran Tuan Lam"
		}
	},
	"openapi": "3.0.0",
	"paths": {
		"/users/{id}": {
			"get": {
				"operationId": "GetUserById",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseModel_400_"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseModel_401_"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseModel_403_"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseModel_404_"
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseModel_422_"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseModel_500_"
								}
							}
						}
					}
				},
				"description": "Get user by id",
				"summary": "Get user by id",
				"tags": [
					"Users"
				],
				"security": [],
				"parameters": [
					{
						"description": "User id",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/users": {
			"put": {
				"operationId": "UpdateUser",
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseModel_400_"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseModel_401_"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseModel_403_"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseModel_404_"
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseModel_422_"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseModel_500_"
								}
							}
						}
					}
				},
				"description": "Update user",
				"summary": "Update user",
				"tags": [
					"Users"
				],
				"security": [],
				"parameters": [
					{
						"description": "User id",
						"in": "query",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateUserBodyRequest"
							}
						}
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "http://localhost:3000/lirest/api/v1"
		}
	],
	"tags": [
		{
			"name": "Users",
			"description": "User related endpoints"
		}
	]
}